AWSTemplateFormatVersion: "2010-09-09"
Description: Deploy user-service to ECS with ALB

Parameters:
  ClusterName:
    Type: String
    Description: Name of the ECS Cluster

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID where ECS is deployed

  Subnet1:
    Type: AWS::EC2::Subnet::Id
    Description: Public Subnet 1

  Subnet2:
    Type: AWS::EC2::Subnet::Id
    Description: Public Subnet 2

  ContainerImage:
    Type: String
    Description: URI of the container image in ECR

Resources:
  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      RoleName: user-service-task-execution-role

  UserServiceTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: user-service-task
      Cpu: "256"
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: user-service
          Image: !Ref ContainerImage
          PortMappings:
            - ContainerPort: 5000
              Protocol: tcp

  UserServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP access to ECS service
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: user-service-alb
      Subnets:
        - !Ref Subnet1
        - !Ref Subnet2
      SecurityGroups:
        - !Ref UserServiceSecurityGroup
      Scheme: internet-facing
      Type: application

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: user-service-tg
      Port: 5000
      Protocol: HTTP
      VpcId: !Ref VpcId
      TargetType: ip
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 30
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  UserService:
    Type: AWS::ECS::Service
    DependsOn: Listener
    Properties:
      ServiceName: user-service
      Cluster: !Ref ClusterName
      LaunchType: FARGATE
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref Subnet1
            - !Ref Subnet2
          SecurityGroups:
            - !Ref UserServiceSecurityGroup
      TaskDefinition: !Ref UserServiceTaskDefinition
      LoadBalancers:
        - TargetGroupArn: !Ref TargetGroup
          ContainerName: user-service
          ContainerPort: 5000

Outputs:
  LoadBalancerDNS:
    Description: Public DNS of the user-service ALB
    Value: !GetAtt LoadBalancer.DNSName
